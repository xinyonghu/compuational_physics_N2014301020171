


import pylab as pl
class uranium_decay:
    def __init__(self, NA = 100, NB = 0, time_constant = 1, time_of_duration = 5, time_step = 0.05):
        # unit of time is second
        self.NA = [number_of_nuclei_NA]
        self.NB = [number_of_nuclei_NB]
        self.t = [0]
        self.tau = time_constant
        self.dt = time_step
        self.time = time_of_duration
        self.nsteps = int(time_of_duration // time_step + 1)
        print("Initial number of type A nuclei ->", number_of_nuclei_NA)
        print('Initial number of type B nuclei ->', number_of_nuclei_NB)
        print("Time constant ->", time_constant)
        print("time step -> ", time_step)
        print("total time -> ", time_of_duration)
    def calculate(self):
        for i in range(self.nsteps):
            tmp_A = self.NA[i] + (self.NB[i] - self.NA[i]) / self.tau * self.dt
            tmp_B = self.NB[i] + (self.NA[i] - self.NB[i]) / self.tau * self.dt
            self.NA.append(tmp_A) 
            self.NB.append(tmp_B) 
            self.t.append(self.t[i] + self.dt) 
    def show_results(self): 
        plot1 = pl.plot(self.t, self.NA, 'b', label = 'Number of Nuclei typeA') 
        plot2 = pl.plot(self.t, self.NB, 'r', label = 'Number of Nuclei typeB') 
        pl.title('Change of Nuclei Relative to the Time') 
        pl.xlabel('time ($s$)') 
        pl.ylabel('Number of Nuclei') 
        pl.legend(loc = 'best') 
        pl.show() 
    def store_results(self): 
        myfile = open('nuclei_decay_data.txt', 'w') 
        for i in range(len(self.t)): 
            print(self.t[i], self.NA[i], self.NB[i], file = myfile) 
        myfile.close() 


